# URL de la página
url_petro <- "https://es.wikipedia.org/wiki/Anexo:Viajes_internacionales_del_presidente_Gustavo_Petro"
url_duque <- "https://es.wikipedia.org/wiki/Anexo:Visitas_oficiales_al_exterior_del_presidente_Iv%C3%A1n_Duque"

# Leer el HTML
pagina <- read_html(url_duque)

# Extraer todas las tablas
tablas <- pagina %>% html_elements("table")

# Revisar cuántas tablas hay
length(tablas)


##

# Convertir todas las tablas a data frames
lista_tablas <- tablas %>% lapply(html_table)

## pegar todas las tablas en un solo dataset y crear variable year
duque_trips<- tibble()
for (i in 1:5) {
  
  tabla <- lista_tablas[[i]]
  tabla<- tabla %>% 
    mutate(year=2017+i)
  duque_trips<- duque_trips %>%
    bind_rows(tabla)
}


#----
###  Crear las funciones para limpiar el texto
### que define las fechas.
### para limpiarlo,  estandarizarlo y convertirlas en formato date

########################
##### function to convert month text to number 
########################

month_number <- function(month) {
  #month <- "ss"
  meses <- c("enero", "febrero", "marzo", "abril", "mayo", "junio", 
             "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
  
  num <- match(tolower(month), meses)
  
  if (is.na(num)) {
    return(NA) 
  } else {
    return(sprintf("%02d", num))
  }
  
}

########################
##### function to get the initial date of visit
########################


months_regex <- "enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre"
first_date<- function(date_str, year) {
  
  #date_str<- "18 de septiembre de 2022 - 24 de septiembre de 2022"
  #year<- "2022"
  number <-  str_extract_all(date_str, "\\b\\d{1,2}\\b")
  month  <- str_extract_all(date_str, months_regex, simplify = FALSE)
  
  number <- number[[1]]
  month  <- month[[1]]
  
  date_in <- NA  # inicializar
  
  date_in<- paste0(number[1], " ",  month[1] )
  a1<- number[1]
  a2<-  month[1]
  
  ## Note: here we are calling the functio  month number
  final_date<- paste0(as.character(year), "-", month_number(a2), "-", sprintf("%02d", as.numeric(a1)))
  
  return(final_date)
}


########################
##### function to get the final date of visit
########################


end_date<- function(date_str, year) {
  
  
  #date_str<- "18 de septiembre de 2022 - 24 de septiembre de 2022"
  #year<- 2021
  number <-  str_extract_all(date_str, "\\b\\d{1,2}\\b")
  month  <- str_extract_all(date_str, months_regex, simplify = FALSE)
  
  number <- number[[1]]
  month  <- month[[1]]
  
  date_end <- NA  # inicializar
  
  ### only 1 day
  if (length(month)==1 & length(number)==1)  {
    
    date_end<- paste0(number[1], " ",  month[1] )
    a1<- number[1]
    a2<-  month[1]
  }
  
  ## two days same month 
  if ( length(month)==1 & length(number)==2) {
    
    date_end<- paste0(number[2], " ",  month[1] )
    a1<- number[2]
    a2<-  month[1]
    
  }
  ## two days  two months 
  if ( length(month)==2 & length(number)==2) {
    
    date_end<- paste0(number[2], " ",  month[2] )
    a1<- number[2]
    a2<-  month[2]
  }
  
  ## 1 days  two months 
  if ( length(month)==2 & length(number)==1) {
    
    date_end<- paste0(number[2], " ",  month[2] )
    a1<- number[2]
    a2<-  month[2]
  }
  ## Note: here we are calling the functio  month number
  final_date<- paste0(as.character(year), "-", month_number(a2), "-", sprintf("%02d", as.numeric(a1)))
  return(final_date[[1]])
  
}

duque_trips_long <- duque_trips %>%
  rename_all(tolower) %>%
  mutate(fecha= tolower(fecha)) %>%
  mutate(first_date_col = map2(fecha, year, first_date),
         end_date_col   = map2(fecha, year, end_date)) 

###

duque_trips_long <- duque_trips_long %>%
  unnest(first_date_col) %>% ## for some reason this was saved as a list
  unnest(end_date_col)  %>%
  mutate(first_date_col = as.Date(first_date_col),
         end_date_col   = as.Date(end_date_col) )


#----- format variables

duque_trips_long <- duque_trips_long %>%
  mutate(country = str_extract(lugar, "\\((.*?)\\)") %>%
         str_remove_all("[\\(\\)]"), 
         country= str_trim(country))


duque_trips_long <- duque_trips_long %>%
  mutate(country2 = str_extract(country, "^\\w+")) %>%
  mutate( country2 = case_when(
    country2 == "Estados" ~ "Estados Unidos",
    country2 == "Países"  ~ "Paises Bajos",
    country2 == "Reino"   ~ "Reino Unido",
    country2 == "Ciudad"   ~ "Ciudad del Vaticano",
    country2 == "El"   ~ "El Salvador",
    country2 == "Corea"   ~ "Corea del Sur",
    country2 == "Emiratos"   ~ "Emiratos Árabes Unidos",
    country2 == "Costa"   ~ "Costa Rica",
    country2 == "República"   ~ "República Dominicana",
    TRUE ~ country2  # Keep original if no match
  ))

duque_trips_long <- duque_trips_long %>%
  select(-country) %>%
  rename(country=country2, 
         date=fecha, 
         motive= `motivo principal`)

duque_trips_long <- duque_trips_long %>% 
  select(country, motive, year, first_date_col, end_date_col)

### generate duration of trips 

duque_trips_long <- duque_trips_long %>%
  mutate(duration = as.numeric(end_date_col - first_date_col) + 1)






ggplot(duque_trips_long, aes(x = first_date_col, y = reorder(country, first_date_col), size = duration)) +
  geom_point(alpha = 0.7, color = "darkblue") +
  theme_minimal() +
  labs(title = "Duración y destino de visitas internacionales",
       x = "Fecha de inicio", y = "País", size = "Días")
